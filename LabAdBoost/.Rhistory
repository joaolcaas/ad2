knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(leaps)
library(caret)
library(plotly)
#library(C50)
library(rpart)
library(rpart.plot)
library(ROSE)
#para lcc
df <- read.csv("/home/joaolaf/Área de Trabalho/train.csv",encoding = "utf-8")
#para notebook
#df <- read.csv("C:\\Users\\João Lucas\\Desktop\\train.csv",encoding = "utf-8")
colnames(df)[13] <- "recursos_pessoas_fisicas"
dataPartition <- createDataPartition(y = df$situacao_final,p = 0.75,list = FALSE)
treino <- df[dataPartition,]
teste <- df[-dataPartition,]
a <-treino %>% group_by(situacao_final) %>%
summarise(totalAparece = n())
a$indexS <- factor(a$situacao_final, levels = a$situacao_final)
p <- plot_ly(a,x =~indexS,y = ~totalAparece,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p
treino_balanced <- ovun.sample(situacao_final~., data=treino,p=0.5, seed=1,method="both")$data
table(treino_balanced$situacao_final)
b <-treino_balanced %>% group_by(situacao_final) %>%
summarise(totalApareceBalanced = n())
b$indexS <- factor(b$situacao_final, levels = b$situacao_final)
p_balanced <- plot_ly(b,x =~indexS,y = ~totalApareceBalanced,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p_balanced
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = FALSE)
formula.votos = as.formula(situacao_final ~  total_receita + total_despesa + quantidade_despesas + recursos_de_pessoas_juridicas + recursos_de_partidos + quantidade_doacoes + quantidade_fornecedores + media_receita + quantidade_doadores)
regressaoLogistica <- train(formula.votos,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
regressaoLogistica
varImp(regressaoLogistica)
formula.situacao.final = as.formula(situacao_final ~ media_receita + quantidade_doacoes + recursos_de_partidos + descricao_cor_raca + despesa_max_campanha + sexo + grau)
regressaoLogisticaNovaFormula <- train(formula.situacao.final,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
regressaoLogisticaNovaFormula
control <- rpart.control(maxdepth=20,minsplit=20,cp=0.001)
arvore <- rpart(formula.situacao.final, data = treino_balanced, control = control)
prp(arvore)
arvore1 <- train(formula.votos,
data= treino_balanced, method = "rpart",
trControl = ctrl,
cp=0.001,  # parâmetro de complexidade
maxdepth=20)
arvore1
adaboost <- train(formula.situacao.final,
data=treino_balanced,
trControl = ctrl,
method = "adaboost")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(leaps)
library(caret)
library(plotly)
#library(C50)
library(rpart)
library(rpart.plot)
library(ROSE)
#para lcc
df <- read.csv("/home/joaolaf/Área de Trabalho/train.csv",encoding = "utf-8")
#para notebook
#df <- read.csv("C:\\Users\\João Lucas\\Desktop\\train.csv",encoding = "utf-8")
colnames(df)[13] <- "recursos_pessoas_fisicas"
dataPartition <- createDataPartition(y = df$situacao_final,p = 0.75,list = FALSE)
treino <- df[dataPartition,]
teste <- df[-dataPartition,]
a <-treino %>% group_by(situacao_final) %>%
summarise(totalAparece = n())
a$indexS <- factor(a$situacao_final, levels = a$situacao_final)
p <- plot_ly(a,x =~indexS,y = ~totalAparece,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p
treino_balanced <- ovun.sample(situacao_final~., data=treino,p=0.5, seed=1,method="both")$data
table(treino_balanced$situacao_final)
b <-treino_balanced %>% group_by(situacao_final) %>%
summarise(totalApareceBalanced = n())
b$indexS <- factor(b$situacao_final, levels = b$situacao_final)
p_balanced <- plot_ly(b,x =~indexS,y = ~totalApareceBalanced,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p_balanced
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = FALSE)
formula.votos = as.formula(situacao_final ~  total_receita + total_despesa + quantidade_despesas + recursos_de_pessoas_juridicas + recursos_de_partidos + quantidade_doacoes + quantidade_fornecedores + media_receita + quantidade_doadores)
regressaoLogistica <- train(formula.votos,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
regressaoLogistica
varImp(regressaoLogistica)
formula.situacao.final = as.formula(situacao_final ~ media_receita + quantidade_doacoes + recursos_de_partidos + descricao_cor_raca + despesa_max_campanha + sexo + grau)
regressaoLogisticaNovaFormula <- train(formula.situacao.final,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
regressaoLogisticaNovaFormula
control <- rpart.control(maxdepth=20,minsplit=20,cp=0.001)
arvore <- rpart(formula.situacao.final, data = treino_balanced, control = control)
prp(arvore)
arvore1 <- train(formula.votos,
data= treino_balanced, method = "rpart",
trControl = ctrl,
cp=0.001,  # parâmetro de complexidade
maxdepth=20)
arvore1
adaboost <- train(formula.situacao.final,
data=treino_balanced,
trControl = ctrl,
method = "adaboost")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(leaps)
library(caret)
library(plotly)
#library(C50)
library(rpart)
library(rpart.plot)
library(ROSE)
#para lcc
df <- read.csv("/home/joaolaf/Área de Trabalho/train.csv",encoding = "utf-8")
#para notebook
#df <- read.csv("C:\\Users\\João Lucas\\Desktop\\train.csv",encoding = "utf-8")
colnames(df)[13] <- "recursos_pessoas_fisicas"
dataPartition <- createDataPartition(y = df$situacao_final,p = 0.75,list = FALSE)
treino <- df[dataPartition,]
teste <- df[-dataPartition,]
a <-treino %>% group_by(situacao_final) %>%
summarise(totalAparece = n())
a$indexS <- factor(a$situacao_final, levels = a$situacao_final)
p <- plot_ly(a,x =~indexS,y = ~totalAparece,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p
treino_balanced <- ovun.sample(situacao_final~., data=treino,p=0.5, seed=1,method="both")$data
table(treino_balanced$situacao_final)
b <-treino_balanced %>% group_by(situacao_final) %>%
summarise(totalApareceBalanced = n())
b$indexS <- factor(b$situacao_final, levels = b$situacao_final)
p_balanced <- plot_ly(b,x =~indexS,y = ~totalApareceBalanced,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p_balanced
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = FALSE)
formula.votos = as.formula(situacao_final ~  total_qreceita + total_despesa + quantidade_despesas + recursos_de_pessoas_juridicas + recursos_de_partidos + quantidade_doacoes + quantidade_fornecedores + media_receita + quantidade_doadores)
regressaoLogistica <- train(formula.votos,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(leaps)
library(caret)
library(plotly)
#library(C50)
library(rpart)
library(rpart.plot)
library(ROSE)
#para lcc
df <- read.csv("/home/joaolaf/Área de Trabalho/train.csv",encoding = "utf-8")
#para notebook
#df <- read.csv("C:\\Users\\João Lucas\\Desktop\\train.csv",encoding = "utf-8")
colnames(df)[13] <- "recursos_pessoas_fisicas"
dataPartition <- createDataPartition(y = df$situacao_final,p = 0.75,list = FALSE)
treino <- df[dataPartition,]
teste <- df[-dataPartition,]
a <-treino %>% group_by(situacao_final) %>%
summarise(totalAparece = n())
a$indexS <- factor(a$situacao_final, levels = a$situacao_final)
p <- plot_ly(a,x =~indexS,y = ~totalAparece,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p
treino_balanced <- ovun.sample(situacao_final~., data=treino,p=0.5, seed=1,method="both")$data
table(treino_balanced$situacao_final)
b <-treino_balanced %>% group_by(situacao_final) %>%
summarise(totalApareceBalanced = n())
b$indexS <- factor(b$situacao_final, levels = b$situacao_final)
p_balanced <- plot_ly(b,x =~indexS,y = ~totalApareceBalanced,type = 'bar', name = 'Situações') %>% layout(title = 'Frequência de cada situação',xaxis = list(title=""),yaxis = list(title = "Quantas vezes cada situação aparece"),barmode = 'stack')
p_balanced
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = FALSE)
formula.votos = as.formula(situacao_final ~  total_receita + total_despesa + quantidade_despesas + recursos_de_pessoas_juridicas + recursos_de_partidos + quantidade_doacoes + quantidade_fornecedores + media_receita + quantidade_doadores)
regressaoLogistica <- train(formula.votos,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
regressaoLogistica
varImp(regressaoLogistica)
formula.situacao.final = as.formula(situacao_final ~ media_receita + quantidade_doacoes + recursos_de_partidos + descricao_cor_raca + despesa_max_campanha + sexo + grau)
regressaoLogisticaNovaFormula <- train(formula.situacao.final,
data = treino_balanced,
method="glm",
trControl = ctrl,
family="binomial",      # se a variável for binária
na.action = na.omit)
regressaoLogisticaNovaFormula
control <- rpart.control(maxdepth=20,minsplit=20,cp=0.001)
arvore <- rpart(formula.situacao.final, data = treino_balanced, control = control)
prp(arvore)
arvore1 <- train(formula.votos,
data= treino_balanced, method = "rpart",
trControl = ctrl,
cp=0.001,  # parâmetro de complexidade
maxdepth=20)
arvore1
adaboost <- train(formula.votos,
data=treino_balanced,
trControl = ctrl,
method = "adaboost")
formula.adaboosy = as.formula(situacao_final ~ media_receita + quantidade_doacoes + recursos_de_partidos + descricao_cor_raca)
adaboost <- train(formula.votos,
data=treino_balanced,
trControl = ctrl,
method = "adaboost")
formula.adaboost = as.formula(situacao_final ~ media_receita + quantidade_doacoes + recursos_de_partidos + descricao_cor_raca)
adaboost <- train(formula.adaboost,
data=treino_balanced,
trControl = ctrl,
method = "adaboost")
teste$predicao.reg <- predict(regressaoLogistica, teste)
TP.teste.reg <- teste %>% filter(situacao_final == "eleito", predicao.reg== "eleito") %>% nrow()
TN.teste.reg <- teste %>% filter(situacao_final == "nao_eleito" , predica.reg == "nao_eleito" ) %>% nrow()
teste$predicao.reg <- predict(regressaoLogistica, teste)
TP.teste.reg <- teste %>% filter(situacao_final == "eleito", predicao.reg== "eleito") %>% nrow()
TN.teste.reg <- teste %>% filter(situacao_final == "nao_eleito" , predicao.reg == "nao_eleito" ) %>% nrow()
FP.teste.reg <- teste %>% filter(situacao_final == "nao_eleito" , predicao.reg == "eleito") %>% nrow()
FN.teste.reg <- teste %>% filter(situacao_final == "eleito", predicao.reg == "nao_eleito" ) %>% nrow()
accuracy.teste.reg <- (TP.teste.reg + TN.teste.reg)/(TP.teste.reg + TN.teste.reg + FP.teste.reg + FN.teste.reg)
precision.teste.reg <- TP.teste.reg / (TP.teste.reg + FP.teste.reg)
recall.teste.reg <- TP.teste.reg / (TP.teste.reg + FN.teste.reg)
Fmeasure.teste.reg <- 2*(recall.teste.reg*precision.teste.reg)/(recall.teste.reg+precision.teste.reg)
accuracy.teste.reg
precision.teste.reg
recall.teste.reg
Fmeasure.teste.reg
teste$predicao.arvore <- predict(arvore1, teste)
TP.teste.arvore <- teste %>% filter(situacao_final == "eleito", predicao.arvore== "eleito") %>% nrow()
TN.teste.arvore <- teste %>% filter(situacao_final == "nao_eleito" , predicao.arvore == "nao_eleito" ) %>% nrow()
FP.teste.arvore <- teste %>% filter(situacao_final == "nao_eleito" , predicao.arvore == "eleito") %>% nrow()
FN.teste.arvore <- teste %>% filter(situacao_final == "eleito", predicao.arvore == "nao_eleito" ) %>% nrow()
accuracy.teste.arvore <- (TP.teste.arvore + TN.teste.arvore)/(TP.teste.arvore + TN.teste.arvore + FP.teste.arvore+ FN.teste.arvore)
precision.teste.arvore <- TP.teste.arvore / (TP.teste.arvore + FP.teste.arvore)
recall.teste.arvore <- TP.teste.arvore / (TP.teste.arvore + FN.teste.arvore)
Fmeasure.teste.arvore <- 2*(recall.teste.arvore*precision.teste.arvore)/(recall.teste.arvore+precision.teste.arvore)
accuracy.teste.arvore
precision.teste.arvore
recall.teste.arvore
Fmeasure.teste.arvore
treino$predicao.reg<- predict(regressaoLogistica, treino)
TP.treino.reg <- treino %>% filter(situacao_final == "eleito", predicao.reg == "eleito") %>% nrow()
TN.treino.reg <- treino %>% filter(situacao_final == "nao_eleito" , predicao.reg == "nao_eleito" ) %>% nrow()
FP.treino.reg <- treino %>% filter(situacao_final == "nao_eleito" , predicao.reg == "eleito") %>% nrow()
FN.treino.reg <- treino %>% filter(situacao_final == "eleito", predicao.reg == "nao_eleito" ) %>% nrow()
accuracy.treino.reg <- (TP.treino.reg + TN.treino.reg)/(TP.treino.reg + TN.treino.reg + FP.treino.reg + FN.treino.reg)
precision.treino.reg <- TP.treino.reg / (TP.treino.reg + FP.treino.reg)
recall.treino.reg <- TP.treino.reg / (TP.treino.reg + FN.treino.reg)
Fmeasure.treino.reg <- 2*(recall.treino.reg*precision.treino.reg)/(recall.treino.reg+precision.treino.reg)
accuracy.treino.reg
precision.treino.reg
recall.treino.reg
Fmeasure.treino.reg
treino$predicao.arvore<- predict(arvore1, treino)
TP.predicao.arvore <- treino %>% filter(situacao_final == "eleito", predicao.arvore == "eleito") %>% nrow()
TN.predicao.arvore <- treino %>% filter(situacao_final == "nao_eleito" , predicao.arvore == "nao_eleito" ) %>% nrow()
FP.predicao.arvore <- treino %>% filter(situacao_final == "nao_eleito" , predicao.arvore == "eleito") %>% nrow()
FN.predicao.arvore <- treino %>% filter(situacao_final == "eleito", predicao.arvore == "nao_eleito" ) %>% nrow()
accuracy.predicao.arvore <- (TP.predicao.arvore + TN.predicao.arvore)/(TP.predicao.arvore + TN.predicao.arvore + FP.predicao.arvore + FN.predicao.arvore)
precision.predicao.arvore <- TP.predicao.arvore / (TP.predicao.arvore + FP.predicao.arvore)
recall.predicao.arvore <- TP.predicao.arvore / (TP.predicao.arvore + FN.predicao.arvore)
Fmeasure.predicao.arvore <- 2*(recall.predicao.arvore*precision.predicao.arvore)/(recall.predicao.arvore+precision.predicao.arvore)
accuracy.predicao.arvore
precision.predicao.arvore
recall.predicao.arvore
Fmeasure.predicao.arvore
